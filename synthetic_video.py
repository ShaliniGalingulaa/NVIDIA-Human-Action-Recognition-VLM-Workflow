# -*- coding: utf-8 -*-
"""synthetic video.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eo0FnhCv2y_04HsuZpaQKwtanARZbUrM
"""

import numpy as np
import cv2
from moviepy.editor import VideoClip
import random

class SyntheticActionGenerator:
    def __init__(self, width=720, height=480, fps=30):
        self.width = width
        self.height = height
        self.fps = fps
        self.actions = {
            'walking': self.generate_walking,
            'running': self.generate_running,
            'jumping': self.generate_jumping,
            'dancing': self.generate_dancing,
            'climbing': self.generate_climbing
        }

    def create_background(self):
        """Create a simple gradient background."""
        background = np.zeros((self.height, self.width, 3), dtype=np.uint8)
        for y in range(self.height):
            r = int(255 * (y / self.height))
            g = int(200 * (y / self.height))
            b = int(100 * (y / self.height))
            background[y, :] = [b, g, r]
        return background

    def draw_stick_figure(self, frame, x, y, color=(255,255,255)):
        """Draw a simple stick figure for synthetic actions."""
        # Head
        cv2.circle(frame, (x, y), 20, color, -1)
        # Body
        cv2.line(frame, (x, y+20), (x, y+100), color, 5)
        # Arms
        cv2.line(frame, (x, y+40), (x-30, y+70), color, 5)
        cv2.line(frame, (x, y+40), (x+30, y+70), color, 5)
        # Legs
        cv2.line(frame, (x, y+100), (x-20, y+150), color, 5)
        cv2.line(frame, (x, y+100), (x+20, y+150), color, 5)

    def generate_walking(self, duration=5):
        """Generate synthetic walking animation."""
        frames = []
        for t in np.linspace(0, duration, duration * self.fps):
            frame = self.create_background()
            x = int(self.width * (0.5 + 0.2 * np.sin(t*2)))
            y = int(self.height * 0.6)
            self.draw_stick_figure(frame, x, y)
            frames.append(frame)
        return frames

    def generate_running(self, duration=5):
        """Generate synthetic running animation."""
        frames = []
        for t in np.linspace(0, duration, duration * self.fps):
            frame = self.create_background()
            x = int(self.width * (0.5 + 0.4 * np.sin(t*4)))
            y = int(self.height * 0.6)
            self.draw_stick_figure(frame, x, y, color=(0,255,0))
            frames.append(frame)
        return frames

    def generate_jumping(self, duration=5):
        """Generate synthetic jumping animation."""
        frames = []
        for t in np.linspace(0, duration, duration * self.fps):
            frame = self.create_background()
            x = int(self.width * 0.5)
            y = int(self.height * (0.6 - 0.2 * np.abs(np.sin(t*3))))
            self.draw_stick_figure(frame, x, y, color=(255,0,0))
            frames.append(frame)
        return frames

    def generate_dancing(self, duration=5):
        """Generate synthetic dancing animation."""
        frames = []
        for t in np.linspace(0, duration, duration * self.fps):
            frame = self.create_background()
            x = int(self.width * (0.5 + 0.2 * np.sin(t*5)))
            y = int(self.height * 0.6)
            self.draw_stick_figure(frame, x, y, color=(0,0,255))
            # Add dance-like arm movements
            frames.append(frame)
        return frames

    def generate_climbing(self, duration=5):
        """Generate synthetic climbing animation."""
        frames = []
        for t in np.linspace(0, duration, duration * self.fps):
            frame = self.create_background()
            x = int(self.width * 0.5)
            y = int(self.height * (0.6 + 0.2 * np.sin(t*3)))
            self.draw_stick_figure(frame, x, y, color=(255,255,0))
            frames.append(frame)
        return frames

    def save_gif(self, frames, filename):
        """Save frames as GIF."""
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(filename, fourcc, self.fps, (self.width, self.height))
        for frame in frames:
            out.write(frame)
        out.release()

    def generate_action_pairs(self):
        """Generate all action pairs."""
        for action in self.actions:
            frames = self.actions[action]()
            self.save_gif(frames, f'synthetic_{action}.gif')

def main():
    generator = SyntheticActionGenerator()
    generator.generate_action_pairs()

if __name__ == "__main__":
    main()

import numpy as np
import cv2
from moviepy.editor import VideoClip
import random
import warnings

# Suppress specific warnings
warnings.filterwarnings("ignore", category=SyntaxWarning)

class SyntheticActionGenerator:
    def __init__(self, width=720, height=480, fps=30):
        self.width = width
        self.height = height
        self.fps = fps
        self.actions = {
            'walking': self.generate_walking,
            'running': self.generate_running,
            'jumping': self.generate_jumping,
            'dancing': self.generate_dancing,
            'climbing': self.generate_climbing
        }

    def create_background(self):
        """Create a simple gradient background."""
        background = np.zeros((self.height, self.width, 3), dtype=np.uint8)
        for y in range(self.height):
            r = int(255 * (y / self.height))
            g = int(200 * (y / self.height))
            b = int(100 * (y / self.height))
            background[y, :] = [b, g, r]
        return background

    def draw_stick_figure(self, frame, x, y, color=(255,255,255)):
        """Draw a simple stick figure for synthetic actions."""
        # Head
        cv2.circle(frame, (x, y), 20, color, -1)
        # Body
        cv2.line(frame, (x, y+20), (x, y+100), color, 5)
        # Arms
        cv2.line(frame, (x, y+40), (x-30, y+70), color, 5)
        cv2.line(frame, (x, y+40), (x+30, y+70), color, 5)
        # Legs
        cv2.line(frame, (x, y+100), (x-20, y+150), color, 5)
        cv2.line(frame, (x, y+100), (x+20, y+150), color, 5)

    def generate_walking(self, duration=5):
        """Generate synthetic walking animation."""
        frames = []
        for t in np.linspace(0, duration, int(duration * self.fps)):
            frame = self.create_background()
            x = int(self.width * (0.5 + 0.2 * np.sin(t*2)))
            y = int(self.height * 0.6)
            self.draw_stick_figure(frame, x, y)
            frames.append(frame)
        return frames

    def generate_running(self, duration=5):
        """Generate synthetic running animation."""
        frames = []
        for t in np.linspace(0, duration, int(duration * self.fps)):
            frame = self.create_background()
            x = int(self.width * (0.5 + 0.4 * np.sin(t*4)))
            y = int(self.height * 0.6)
            self.draw_stick_figure(frame, x, y, color=(0,255,0))
            frames.append(frame)
        return frames

    def generate_jumping(self, duration=5):
        """Generate synthetic jumping animation."""
        frames = []
        for t in np.linspace(0, duration, int(duration * self.fps)):
            frame = self.create_background()
            x = int(self.width * 0.5)
            y = int(self.height * (0.6 - 0.2 * np.abs(np.sin(t*3))))
            self.draw_stick_figure(frame, x, y, color=(255,0,0))
            frames.append(frame)
        return frames

    def generate_dancing(self, duration=5):
        """Generate synthetic dancing animation."""
        frames = []
        for t in np.linspace(0, duration, int(duration * self.fps)):
            frame = self.create_background()
            x = int(self.width * (0.5 + 0.2 * np.sin(t*5)))
            y = int(self.height * 0.6)
            self.draw_stick_figure(frame, x, y, color=(0,0,255))
            frames.append(frame)
        return frames

    def generate_climbing(self, duration=5):
        """Generate synthetic climbing animation."""
        frames = []
        for t in np.linspace(0, duration, int(duration * self.fps)):
            frame = self.create_background()
            x = int(self.width * 0.5)
            y = int(self.height * (0.6 + 0.2 * np.sin(t*3)))
            self.draw_stick_figure(frame, x, y, color=(255,255,0))
            frames.append(frame)
        return frames

    def save_gif(self, frames, filename):
        """Save frames as GIF."""
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(filename, fourcc, self.fps, (self.width, self.height))
        for frame in frames:
            out.write(frame)
        out.release()

    def generate_action_pairs(self):
        """Generate all action pairs."""
        for action in self.actions:
            frames = self.actions[action]()
            self.save_gif(frames, f'synthetic_{action}.gif')

def main():
    generator = SyntheticActionGenerator()
    generator.generate_action_pairs()

if __name__ == "__main__":
    main()